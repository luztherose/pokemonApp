{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","state","pokemonsList","limit","type","handleChange","event","inputName","target","name","eventResult","value","pokemonLimit","pokemonType","Number","setState","handleSubmit","e","preventDefault","fetchPokemons","userChoice","fetch","then","response","json","data","fetchApokemon","pokemonsPromises","results","map","poke","url","res","pokeInfo","Promise","all","fetchPokemonType","console","log","catch","error","this","className","onSubmit","htmlFor","id","onChange","min","placeholder","pokemon","src","alt","types","typeName","slot","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5386d996.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\n\nclass App extends Component {\n  state = {\n    pokemonsList: [],\n    limit: 10,\n    type: \"all\"\n  }\n\n  handleChange = (event) => {\n    let inputName = event.target.name\n    let eventResult = event.target.value\n    let pokemonLimit = this.state.limit;\n    let pokemonType= this.state.type;\n    if(inputName === \"types\") {\n      pokemonType = eventResult\n    }else {\n      pokemonLimit = Number(eventResult)\n    }\n    this.setState({\n      limit: pokemonLimit,\n      type:pokemonType\n    });\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.fetchPokemons();\n  }\n\n  componentDidMount() {\n    this.fetchPokemons();\n  }\n\n  fetchPokemons = () => {\n    let userChoice = this.state.limit;\n    fetch(`https://pokeapi.co/api/v2/pokemon?offset=0&limit=${userChoice}`)\n      .then((response) => {\n        return response.json()\n      })\n      .then(data => {\n        this.fetchApokemon(data)\n      });\n  }\n  fetchApokemon = (data) => {\n    const pokemonData = data.results;\n    let pokemonsPromises = pokemonData.map(poke => {\n      return fetch(poke.url).then(res => res.json())\n        .then(pokeInfo => {\n          return pokeInfo\n        })\n    });\n    // All promises are received\n    Promise.all(pokemonsPromises).then((results) => {\n      this.setState({\n        pokemonsList: results\n      })\n    })\n  }\n  fetchPokemonType = () => {\n    const type = this.state.type\n    fetch(`https://pokeapi.co/api/v2/type/${type}`)\n    .then(res => res.json())\n    .then( data => {\n        console.log(data)\n    })\n    .catch(error => console.log(error))\n}\n\n  render() {\n    return (\n      <div className=\"wrapper\">\n        <h1>Kanto Pokemon</h1>\n        <div>\n          <form className=\"searchForm\" onSubmit={this.handleSubmit}>\n\n            <label htmlFor=\"pokemonTypes\">Choose a type:</label>\n\n            <select name=\"types\" id=\"types\" onChange={ this.handleChange }>\n            <option value=\"all\">All</option>\n              <option value=\"normal\">Normal</option>\n              <option value=\"fighting\">Fighting</option>\n              <option value=\"flying\">Flying</option>\n              <option value=\"poison\">Poison</option>\n\n              <option value=\"ground\">Ground</option>\n              <option value=\"rock\">Rock</option>\n              <option value=\"bug\">Bug</option>\n              <option value=\"ghost\">Ghost</option>\n\n              <option value=\"steel\">Steel</option>\n              <option value=\"fire\">Fire</option>\n              <option value=\"water\">Water</option>\n              <option value=\"grass\">Grass</option>\n\n              <option value=\"electric\">Electric</option>\n              <option value=\"psychic\">Psychic</option>\n              <option value=\"ice\">Ice</option>\n              <option value=\"dragon\">Dragon</option>\n\n              <option value=\"dark\">Dark</option>\n              <option value=\"fairy\">Fairy</option>\n              <option value=\"unknown\">Unknown</option>\n              <option value=\"shadow\">Shadow</option>\n            </select>\n\n            {/* <input type=\"search\" id=\"psearch\" name=\"psearch\" placeholder=\"butterfree\"></input> */}\n\n            <label htmlFor=\"gsearch\">Amount:</label>\n            <input type=\"number\" min=\"1\" id=\"quantity\" placeholder=\"15\" name=\"quantity\" onChange={ this.handleChange }></input>\n            <input type=\"submit\" value=\"Submit\"></input>\n          </form>\n        </div>\n        <div className=\"pokemonContainer\">\n          {\n            this.state.pokemonsList.map((pokemon) => {\n              return (\n                <div className=\"boxContainer\" key={pokemon.id}>\n                  <img src={`https://pokeres.bastionbot.org/images/pokemon/${pokemon.id}.png`} alt={`this is ${pokemon.name}the pokemon`}></img>\n                  <div className=\"textDescription\">\n                    <h2>{pokemon.name}</h2>\n                    <p>#{pokemon.id}</p>\n                    {\n                      pokemon.types.map(typeName => {\n                        return (\n                          <ul key={typeName.slot}>\n                            <li>{typeName.type.name}</li>\n                          </ul>\n                        )\n                      })\n                    }\n                  </div>\n                </div>\n              );\n            })\n          }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}