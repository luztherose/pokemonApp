{"version":3,"sources":["Modal.js","App.js","reportWebVitals.js","index.js"],"names":["Modal","this","props","className","onClose","pokemon","pokeClicked","id","onClick","name","height","weight","abilities","map","pokeAbility","index","ability","moves","pokeMoves","move","Component","App","state","pokemonsList","limit","typesList","type","isLoading","isModalVisible","selectedPokemon","isPokeClicked","handleChange","event","inputName","target","eventResult","value","pokemonLimit","pokemonType","Number","setState","handleSubmit","e","preventDefault","fetchPokemonsByType","fetchPokemons","handleLoader","handleInputFields","userChoice","fetch","then","response","json","data","fetchApokemon","results","pokemonData","pokemonsPromises","poke","url","res","catch","error","console","log","Promise","all","fetchPokemonTypes","allTypeList","limitNumber","limitedPokemons","slice","item","handleModalClassName","showModal","poken","closeModal","handlePokemonClick","disabled","onSubmit","htmlFor","onChange","min","placeholder","title","src","alt","types","typeName","slot","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0e551b1d.chunk.js","sourcesContent":["import { Component } from \"react\";\n\nclass Modal extends Component {\n  render() {\n    // Destructuring props\n    const { className, onClose, pokemon, pokeClicked } = this.props;\n    return (\n      <div>\n        <div className={className} id=\"myModal\">\n          <div className=\"modal-content\">\n            <span className=\"close\" onClick={onClose}>\n              &times;\n            </span>\n            <div>\n              <ul className=\"pokeDetails\">\n                <h1>Hi, I'm {pokemon.name}! ðŸ˜Š</h1>\n                <h2>Description:</h2>\n                <li>\n                  <strong>Height:</strong> {pokemon.height}\n                </li>\n                <li>\n                  <strong>Weight:</strong> {pokemon.weight}\n                </li>\n                <h2>Abilities:</h2>\n                {pokeClicked\n                  ? pokemon.abilities.map((pokeAbility, index) => {\n                      return <li key={index}>{pokeAbility.ability.name}</li>;\n                    })\n                  : \"\"}\n                <h2>Moves:</h2>\n                <div className=\"pokemonMovesContainer\">\n                  {pokeClicked\n                    ? pokemon.moves.map((pokeMoves, index) => {\n                        return <li key={index}>{pokeMoves.move.name}</li>;\n                      })\n                    : \"\"}\n                </div>\n              </ul>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Modal;\n","import React, { Component } from \"react\";\nimport Modal from \"./Modal\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    pokemonsList: [],\n    limit: 10,\n    typesList: [],\n    type: \"all\",\n    isLoading: true,\n    isModalVisible: false,\n    selectedPokemon: {},\n    isPokeClicked: false,\n  };\n\n  handleChange = (event) => {\n    let inputName = event.target.name;\n    let eventResult = event.target.value;\n    let pokemonLimit = this.state.limit;\n    let pokemonType = this.state.type;\n    if (inputName === \"types\") {\n      pokemonType = eventResult;\n    } else {\n      pokemonLimit = Number(eventResult);\n    }\n    this.setState({\n      limit: pokemonLimit,\n      type: pokemonType,\n    });\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.setState({\n      isLoading: true,\n    });\n    if (this.state.type !== \"all\" && this.state.limit > 0) {\n      this.fetchPokemonsByType();\n    } else {\n      this.fetchPokemons();\n    }\n  };\n\n  handleLoader = () => {\n    let className = \"\";\n    if (this.state.isLoading) {\n      className = \"loader\";\n    } else {\n      className = \"hide-loader\";\n    }\n    return className;\n  };\n\n  handleInputFields = () => this.state.isLoading;\n\n  componentDidMount() {\n    this.fetchPokemonTypes();\n    this.fetchPokemons();\n  }\n\n  fetchPokemons = () => {\n    let userChoice = this.state.limit;\n    fetch(`https://pokeapi.co/api/v2/pokemon?offset=0&limit=${userChoice}`)\n      .then((response) => {\n        return response.json();\n      })\n      .then((data) => {\n        this.fetchApokemon(data.results);\n      });\n  };\n\n  fetchApokemon = (pokemonData) => {\n    let pokemonsPromises = pokemonData.map((poke) => {\n      return fetch(poke.url)\n        .then((res) => res.json())\n        .catch((error) => console.log(error));\n    });\n    // All promises are received\n    Promise.all(pokemonsPromises).then((results) => {\n      /// end loading\n      this.setState({\n        isLoading: false,\n        pokemonsList: results,\n      });\n    });\n  };\n\n  fetchPokemonTypes = () => {\n    fetch(`https://pokeapi.co/api/v2/type/`)\n      .then((res) => res.json())\n      .then((data) => {\n        const allTypeList = data.results;\n        this.setState({\n          typesList: allTypeList,\n        });\n      })\n      .catch((error) => console.log(error));\n  };\n\n  fetchPokemonsByType = () => {\n    const type = this.state.type;\n    fetch(`https://pokeapi.co/api/v2/type/${type}`)\n      .then((res) => res.json())\n      .then((data) => {\n        const limitNumber = this.state.limit;\n        const limitedPokemons = data.pokemon\n          .slice(0, limitNumber)\n          .map((item) => item.pokemon);\n\n        this.fetchApokemon(limitedPokemons);\n      })\n      .catch((error) => console.log(error));\n  };\n\n  handleModalClassName = () => {\n    let className = \"\";\n    if (this.state.isModalVisible) {\n      className = \"modal\";\n    } else {\n      className = \"modalHide\";\n    }\n    return className;\n  };\n\n  showModal = (poken) => {\n    this.setState({\n      isPokeClicked: true,\n      isModalVisible: true,\n      selectedPokemon: poken,\n    });\n  };\n\n  closeModal = () => {\n    this.setState({\n      isModalVisible: false,\n      isPokeClicked: false,\n    });\n  };\n\n  handlePokemonClick = (poken) => {\n    this.showModal(poken);\n  };\n\n  render() {\n    return (\n      <div className=\"wrapper\">\n        <h1>Kanto Pokemon</h1>\n        <div className={this.handleLoader()} id=\"loader\"></div>\n        <fieldset disabled={this.handleInputFields()}>\n          <form className=\"searchForm\" onSubmit={this.handleSubmit}>\n            <label htmlFor=\"types\">Choose a type:</label>\n            <select name=\"types\" id=\"types\" onChange={this.handleChange}>\n              <option value=\"all\"> all</option>\n              {this.state.typesList.map((item, index) => {\n                return (\n                  <option key={index} value={`${item.name}`}>\n                    {item.name}\n                  </option>\n                );\n              })}\n            </select>\n\n            <label htmlFor=\"quantity\">Amount:</label>\n            <input\n              type=\"number\"\n              min=\"1\"\n              id=\"quantity\"\n              placeholder=\"15\"\n              name=\"quantity\"\n              onChange={this.handleChange}\n            ></input>\n            <input type=\"submit\" value=\"Submit\"></input>\n          </form>\n        </fieldset>\n        <div className=\"pokemonContainer\">\n          {this.state.pokemonsList.map((pokemon) => {\n            return (\n              <div\n                className=\"boxContainer\"\n                key={pokemon.id}\n                onClick={() => {\n                  this.handlePokemonClick(pokemon);\n                }}\n                title=\"Click to learn more about me!\"\n              >\n                <img\n                  src={`https://cdn.traction.one/pokedex/pokemon/${pokemon.id}.png`}\n                  alt={`this is ${pokemon.name} the pokemon`}\n                ></img>\n                <div className=\"textDescription\">\n                  <h2>{pokemon.name}</h2>\n                  <p>#{pokemon.id}</p>\n                  {pokemon.types.map((typeName) => {\n                    return (\n                      <ul key={typeName.slot} className=\"pokeTypeContainer\">\n                        <li>{typeName.type.name}</li>\n                      </ul>\n                    );\n                  })}\n                </div>\n              </div>\n            );\n          })}\n        </div>\n        <Modal\n          className={this.handleModalClassName()}\n          onClose={this.closeModal}\n          pokemon={this.state.selectedPokemon}\n          pokeClicked={this.state.isPokeClicked}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","//import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}