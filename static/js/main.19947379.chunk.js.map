{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","state","pokemonsList","limit","handleChange","event","pokemonLimit","target","value","setState","Number","handleSubmit","e","preventDefault","fetchPokemon","userChoice","fetch","then","response","json","data","pokemonsPromises","results","map","poke","url","res","pokeInfo","Promise","all","console","log","catch","error","this","className","onSubmit","htmlFor","type","id","name","min","onChange","pokemon","src","alt","types","typeName","slot","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"wOA4FeA,G,kNAxFbC,MAAQ,CACNC,aAAc,GACdC,MAAO,I,EAGTC,aAAe,SAACC,GACd,IAAMC,EAAeD,EAAME,OAAOC,MAClC,EAAKC,SAAS,CACZN,MAAOO,OAAOJ,M,EAIpBK,aAAe,SAACC,GACdA,EAAEC,iBACF,EAAKC,gB,EAOLA,aAAe,WACb,IAAIC,EAAa,EAAKd,MAAME,MAC5Ba,MAAM,4CAAD,OAA6CD,EAA7C,kBAAiEA,IACnEE,MAAK,SAACC,GACL,OAAOA,EAASC,UAEjBF,MAAK,SAAAG,GACJ,IACIC,EADgBD,EAAKE,QACUC,KAAI,SAAAC,GACrC,OAAOR,MAAMQ,EAAKC,KAAKR,MAAK,SAAAS,GAAG,OAAIA,EAAIP,UACpCF,MAAK,SAAAU,GACJ,OAAOA,QAIbC,QAAQC,IAAIR,GAAkBJ,MAAK,SAACK,GAClCQ,QAAQC,IAAI,KACZ,EAAKtB,SAAS,CACZP,aAAaoB,OAGhBU,OAAM,SAAAC,GAAK,OAAIH,QAAQC,IAAR,4BAAiCE,W,kEAxBrDC,KAAKpB,iB,+BA6BL,OACE,sBAAKqB,UAAU,UAAf,UACE,+CACA,8BACE,uBAAMA,UAAU,aAAaC,SAAWF,KAAKvB,aAA7C,UACE,uBAAO0B,QAAQ,UAAf,6BACA,uBAAOC,KAAK,SAASC,GAAG,UAAUC,KAAK,YACvC,uBAAOH,QAAQ,UAAf,qBACA,uBAAOC,KAAK,SAASG,IAAI,IAAIF,GAAG,WAAWC,KAAK,WAAYE,SAAWR,KAAK9B,eAC5E,uBAAOkC,KAAK,SAAS9B,MAAM,gBAG/B,qBAAK2B,UAAU,mBAAf,SAEID,KAAKjC,MAAMC,aAAaqB,KAAI,SAACoB,GAC3B,OACE,sBAAKR,UAAU,eAAf,UACE,qBAAKS,IAAG,wDAAoDD,EAAQJ,GAA5D,QAAuEM,IAAG,kBAAcF,EAAQH,KAAtB,iBAClF,sBAAKL,UAAU,kBAAf,UACE,6BAAMQ,EAAQH,OACd,kCAAMG,EAAQJ,MAEZI,EAAQG,MAAMvB,KAAI,SAAAwB,GAChB,OACE,6BACE,6BAAMA,EAAST,KAAKE,QADZO,EAASC,cAROL,EAAQJ,gB,GAhE1CU,cCSHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBnC,MAAK,YAAkD,IAA/CoC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.19947379.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    pokemonsList: [],\n    limit: 10\n  }\n\n  handleChange = (event) => {\n    const pokemonLimit = event.target.value\n    this.setState({\n      limit: Number(pokemonLimit)\n    });\n}\n\nhandleSubmit = (e) =>  {\n  e.preventDefault();\n  this.fetchPokemon();\n}\n\n  componentDidMount() {\n    this.fetchPokemon();\n  }\n\n  fetchPokemon = () => {\n    let userChoice = this.state.limit;\n    fetch(`https://pokeapi.co/api/v2/pokemon?offset=${userChoice}&limit=${userChoice}`)\n      .then((response)=> {\n        return response.json()\n      })\n      .then(data => {\n        const pokemonData = data.results;\n        let pokemonsPromises = pokemonData.map(poke => {          \n          return fetch(poke.url).then(res => res.json())\n            .then(pokeInfo => {\n              return pokeInfo\n            })\n        });\n        // All promises are received\n        Promise.all(pokemonsPromises).then((results) => {\n          console.log(\"7\")\n          this.setState({\n            pokemonsList:results\n          })\n        })\n        .catch(error => console.log(`Error in promises ${error}`))\n      });\n  }\n\n  render() {\n    return (\n      <div className=\"wrapper\"> \n        <h1>Kanto Pokemon</h1>\n        <div>\n          <form className=\"searchForm\" onSubmit={ this.handleSubmit }>\n            <label htmlFor=\"gsearch\">Search by name:</label>\n            <input type=\"search\" id=\"psearch\" name=\"psearch\"></input>\n            <label htmlFor=\"gsearch\">Amount:</label>\n            <input type=\"number\" min=\"1\" id=\"quantity\" name=\"quantity\"  onChange={ this.handleChange }></input>\n            <input type=\"submit\" value=\"Submit\"></input>\n          </form>\n        </div>\n        <div className=\"pokemonContainer\">\n          {\n            this.state.pokemonsList.map((pokemon) => {\n              return (\n                <div className=\"boxContainer\" key={ pokemon.id }>\n                  <img src={`https://pokeres.bastionbot.org/images/pokemon/${ pokemon.id }.png`} alt={`this is ${ pokemon.name }the pokemon`}></img>\n                  <div className=\"textDescription\">\n                    <h2>{ pokemon.name }</h2>\n                    <p>#{ pokemon.id }</p>\n                    {\n                      pokemon.types.map(typeName => {\n                        return (\n                          <ul key={ typeName.slot }>\n                            <li>{ typeName.type.name }</li>\n                          </ul>\n                        )\n                      })\n                    }\n                  </div>\n                </div>\n              );\n            })\n          }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}