{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","state","pokemonsList","limit","typesList","type","handleChange","event","inputName","target","name","eventResult","value","pokemonLimit","pokemonType","Number","setState","handleSubmit","e","preventDefault","fetchPokemons","userChoice","fetch","then","response","json","data","fetchApokemon","pokemonsPromises","results","map","poke","url","res","pokeInfo","Promise","all","fetchPokemonTypes","allTypeList","catch","error","console","log","this","className","onSubmit","htmlFor","id","onChange","item","index","min","placeholder","pokemon","src","alt","types","typeName","slot","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"wOAgIeA,G,kNA3HbC,MAAQ,CACNC,aAAc,GACdC,MAAO,GACPC,UAAW,GACXC,KAAM,O,EAGRC,aAAe,SAACC,GACd,IAAIC,EAAYD,EAAME,OAAOC,KACzBC,EAAcJ,EAAME,OAAOG,MAC3BC,EAAe,EAAKZ,MAAME,MAC1BW,EAAc,EAAKb,MAAMI,KACX,UAAdG,EACFM,EAAcH,EAEdE,EAAeE,OAAOJ,GAExB,EAAKK,SAAS,CACZb,MAAOU,EACPR,KAAMS,K,EAIVG,aAAe,SAACC,GACdA,EAAEC,iBACF,EAAKC,iB,EAQPA,cAAgB,WACd,IAAIC,EAAa,EAAKpB,MAAME,MAC5BmB,MAAM,oDAAD,OAAqDD,IACvDE,MAAK,SAACC,GACL,OAAOA,EAASC,UAEjBF,MAAK,SAAAG,GACJ,EAAKC,cAAcD,O,EAGzBC,cAAgB,SAACD,GACf,IACIE,EADgBF,EAAKG,QACUC,KAAI,SAAAC,GACrC,OAAOT,MAAMS,EAAKC,KAAKT,MAAK,SAAAU,GAAG,OAAIA,EAAIR,UACpCF,MAAK,SAAAW,GACJ,OAAOA,QAIbC,QAAQC,IAAIR,GAAkBL,MAAK,SAACM,GAClC,EAAKb,SAAS,CACZd,aAAc2B,Q,EAIpBQ,kBAAoB,WAClBf,MAAM,mCACHC,MAAK,SAAAU,GAAG,OAAIA,EAAIR,UAChBF,MAAK,SAAAG,GACJ,IAAMY,EAAcZ,EAAKG,QACzB,EAAKb,SAAS,CACZZ,UAAWkC,OAGdC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,O,kEAtC9BG,KAAKN,oBACLM,KAAKvB,kB,+BAyCL,OACE,sBAAKwB,UAAU,UAAf,UACE,+CACA,8BACE,uBAAMA,UAAU,aAAaC,SAAUF,KAAK1B,aAA5C,UAEE,uBAAO6B,QAAQ,eAAf,4BACA,yBAAQpC,KAAK,QAAQqC,GAAG,QAAQC,SAAUL,KAAKrC,aAA/C,UACA,wBAAQM,MAAM,MAAd,kBAEE+B,KAAK1C,MAAMG,UAAU0B,KAAI,SAACmB,EAAMC,GAC9B,OACE,wBAAoBtC,MAAK,UAAKqC,EAAKvC,MAAnC,SAA4CuC,EAAKvC,MAApCwC,SAMnB,uBAAOJ,QAAQ,UAAf,qBACA,uBAAOzC,KAAK,SAAS8C,IAAI,IAAIJ,GAAG,WAAWK,YAAY,KAAK1C,KAAK,WAAWsC,SAAUL,KAAKrC,eAC3F,uBAAOD,KAAK,SAASO,MAAM,gBAG/B,qBAAKgC,UAAU,mBAAf,SAEID,KAAK1C,MAAMC,aAAa4B,KAAI,SAACuB,GAC3B,OACE,sBAAKT,UAAU,eAAf,UACE,qBAAKU,IAAG,wDAAmDD,EAAQN,GAA3D,QAAqEQ,IAAG,kBAAaF,EAAQ3C,KAArB,iBAChF,sBAAKkC,UAAU,kBAAf,UACE,6BAAKS,EAAQ3C,OACb,kCAAK2C,EAAQN,MAEXM,EAAQG,MAAM1B,KAAI,SAAA2B,GAChB,OACE,6BACE,6BAAKA,EAASpD,KAAKK,QADZ+C,EAASC,cAROL,EAAQN,gB,GAnGzCY,cCQHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBvC,MAAK,YAAkD,IAA/CwC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.e315e484.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\n\nclass App extends Component {\n  state = {\n    pokemonsList: [],\n    limit: 10,\n    typesList: [],\n    type: \"all\"\n  }\n\n  handleChange = (event) => {\n    let inputName = event.target.name\n    let eventResult = event.target.value\n    let pokemonLimit = this.state.limit;\n    let pokemonType = this.state.type;\n    if (inputName === \"types\") {\n      pokemonType = eventResult\n    } else {\n      pokemonLimit = Number(eventResult)\n    }\n    this.setState({\n      limit: pokemonLimit,\n      type: pokemonType\n    });\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.fetchPokemons();\n  }\n\n  componentDidMount() {\n    this.fetchPokemonTypes();\n    this.fetchPokemons();\n  }\n\n  fetchPokemons = () => {\n    let userChoice = this.state.limit;\n    fetch(`https://pokeapi.co/api/v2/pokemon?offset=0&limit=${userChoice}`)\n      .then((response) => {\n        return response.json()\n      })\n      .then(data => {\n        this.fetchApokemon(data)\n      });\n  }\n  fetchApokemon = (data) => {\n    const pokemonData = data.results;\n    let pokemonsPromises = pokemonData.map(poke => {\n      return fetch(poke.url).then(res => res.json())\n        .then(pokeInfo => {\n          return pokeInfo\n        })\n    });\n    // All promises are received\n    Promise.all(pokemonsPromises).then((results) => {\n      this.setState({\n        pokemonsList: results\n      })\n    })\n  }\n  fetchPokemonTypes = () => {\n    fetch(`https://pokeapi.co/api/v2/type/`)\n      .then(res => res.json())\n      .then(data => {\n        const allTypeList = data.results;\n        this.setState({\n          typesList: allTypeList\n        })\n      })\n      .catch(error => console.log(error))\n  }\n\n  render() {\n    return (\n      <div className=\"wrapper\">\n        <h1>Kanto Pokemon</h1>\n        <div>\n          <form className=\"searchForm\" onSubmit={this.handleSubmit}>\n            \n            <label htmlFor=\"pokemonTypes\">Choose a type:</label>\n            <select name=\"types\" id=\"types\" onChange={this.handleChange}>\n            <option value=\"all\"> all</option>\n            {\n              this.state.typesList.map((item, index) => {\n                return (\n                  <option key={index} value={`${item.name}`}>{item.name}</option>\n                )\n              }) \n            }\n            </select>\n\n            <label htmlFor=\"gsearch\">Amount:</label>\n            <input type=\"number\" min=\"1\" id=\"quantity\" placeholder=\"15\" name=\"quantity\" onChange={this.handleChange}></input>\n            <input type=\"submit\" value=\"Submit\"></input>\n          </form>\n        </div>\n        <div className=\"pokemonContainer\">\n          {\n            this.state.pokemonsList.map((pokemon) => {\n              return (\n                <div className=\"boxContainer\" key={pokemon.id}>\n                  <img src={`https://pokeres.bastionbot.org/images/pokemon/${pokemon.id}.png`} alt={`this is ${pokemon.name}the pokemon`}></img>\n                  <div className=\"textDescription\">\n                    <h2>{pokemon.name}</h2>\n                    <p>#{pokemon.id}</p>\n                    {\n                      pokemon.types.map(typeName => {\n                        return (\n                          <ul key={typeName.slot}>\n                            <li>{typeName.type.name}</li>\n                          </ul>\n                        )\n                      })\n                    }\n                  </div>\n                </div>\n              );\n            })\n          }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}